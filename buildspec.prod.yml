version: 0.2

env:
  parameter-store:
    SECRET_KEY: "/vj-prod/SECRET_KEY"
    ADMIN_URL: "/vj-prod/ADMIN_URL"

    RDS_USERNAME: "/vj-prod/RDS_USERNAME"
    RDS_PASSWORD: "/vj-prod/RDS_PASSWORD"
    RDS_HOSTNAME: "/vj-prod/RDS_HOSTNAME"

    GOOGLE_CLIENT_ID: "/vj-prod/GOOGLE_CLIENT_ID"
    GOOGLE_CLIENT_SECRET: "/vj-prod/GOOGLE_CLIENT_SECRET"

    AWS_S3_ACCESS_KEY_ID: "/vj-prod/AWS_S3_ACCESS_KEY_ID"
    AWS_S3_SECRET_ACCESS_KEY: "/vj-prod/AWS_S3_SECRET_ACCESS_KEY"

    AWS_MEDIACONVERT_ACCESS_KEY_ID: "/vj-prod/AWS_MEDIACONVERT_ACCESS_KEY_ID"
    AWS_MEDIACONVERT_SECRET_ACCESS_KEY: "/vj-prod/AWS_MEDIACONVERT_SECRET_ACCESS_KEY"
    AWS_MEDIACONVERT_ROLE_ARN: "/vj-prod/AWS_MEDIACONVERT_ROLE_ARN"
    AWS_MEDIACONVERT_ENDPOINT_URL: "/vj-prod/AWS_MEDIACONVERT_ENDPOINT_URL"

    AWS_SNS_ACCESS_KEY_ID: "/vj-prod/AWS_SNS_ACCESS_KEY_ID"
    AWS_SNS_SECRET_ACCESS_KEY: "/vj-prod/AWS_SNS_SECRET_ACCESS_KEY"
    AWS_SNS_TOPIC_ARN: "/vj-prod/AWS_SNS_TOPIC_ARN"

    BOSS_URL: "/vj-prod/BOSS_URL"
    BOSS_SECRET_KEY: "/vj-prod/BOSS_SECRET_KEY"

    STRIPE_SECRET_KEY: "/vj-prod/STRIPE_SECRET_KEY"
    STRIPE_WEBHOOK_SECRET: "/vj-prod/STRIPE_WEBHOOK_SECRET"
    STRIPE_PRICE_ID_USD: "/vj-prod/STRIPE_PRICE_ID_USD"
    STRIPE_PRICE_ID_INR: "/vj-prod/STRIPE_PRICE_ID_INR"

    RESEND_API_KEY: "/vj-prod/RESEND_API_KEY"
    RESEND_WEBHOOK_SIGNING_KEY: "/vj-prod/RESEND_WEBHOOK_SIGNING_KEY"

phases:
  pre_build:
    commands:
      - echo Fetching env variables from S3...
      - touch env.bash
      - aws s3 cp $S3_ENV_FILE env.bash
      - . ./env.bash
      - cat ./env.bash

      - echo CI_CD_STAGE $CI_CD_STAGE

      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
  build:
    commands:
      - echo AWS_MEDIACONVERT_ENDPOINT_URL $AWS_MEDIACONVERT_ENDPOINT_URL
      - printenv
      - DATE=$(date +"%Y%m%d_%H%M%S")
      - echo Build started on $(date +"%Y%m%d_%H%M%S")
      - echo Building the Docker images...
      - API_URI_T=$REPOSITORY_URI:api_$DATE
      - NGINX_URI_T=$REPOSITORY_URI:nginx_$DATE
      - CELERY_URI_T=$REPOSITORY_URI:celery_$DATE
      - BEAT_URI_T=$REPOSITORY_URI:beat_$DATE

      - docker-compose -f docker-compose.prod.yml build
      - docker tag api:latest $API_URI_T
      - docker tag nginx:latest $NGINX_URI_T
      - docker tag celery:latest $CELERY_URI_T
      - docker tag beat:latest $BEAT_URI_T
      # - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on $(date +"%Y%m%d_%H%M%S")
      - echo Pushing the Docker images...
      - docker push --all-tags $REPOSITORY_URI

      - sed -i 's@<NGINX_IMAGE>@'"$NGINX_URI_T"'@' aws/prod/taskdef.json
      - sed -i 's@<API_IMAGE>@'"$API_URI_T"'@' aws/prod/taskdef.json
      - sed -i 's@<CELERY_IMAGE>@'"$CELERY_URI_T"'@' aws/prod/taskdef.json
      - sed -i 's@<BEAT_IMAGE>@'"$BEAT_URI_T"'@' aws/prod/taskdef.json

      - cat aws/prod/taskdef.json

      - printf '[{"name":"v-api","imageUri":"%s"},{"name":"vj-nginx","imageUri":"%s"},{"name":"vj-celery","imageUri":"%s"},{"name":"vj-beat-celery","imageUri":"%s"}]' $API_URI_T $NGINX_URI_T $CELERY_URI_T $BEAT_URI_T > imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - aws/prod/taskdef.json
  name: buildartifacts
